<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="182" onload="init(evt)" viewBox="0 0 1200 182" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="182.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="165" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="165" > </text>
<g id="frames">
<g >
<title>QTextBlock::position (2 samples, 0.11%)</title><rect x="12.5" y="101" width="1.3" height="15.0" fill="rgb(218,202,0)" rx="2" ry="2" />
<text  x="15.51" y="111.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.05%)</title><rect x="37.0" y="53" width="0.6" height="15.0" fill="rgb(249,43,48)" rx="2" ry="2" />
<text  x="39.99" y="63.5" ></text>
</g>
<g >
<title>adler32_z (1 samples, 0.05%)</title><rect x="64.0" y="101" width="0.6" height="15.0" fill="rgb(217,164,11)" rx="2" ry="2" />
<text  x="66.98" y="111.5" ></text>
</g>
<g >
<title>[libQt5Gui.so.5.9.5] (2 samples, 0.11%)</title><rect x="41.4" y="85" width="1.2" height="15.0" fill="rgb(239,218,29)" rx="2" ry="2" />
<text  x="44.38" y="95.5" ></text>
</g>
<g >
<title>boost::detail::find_tss_data (83 samples, 4.41%)</title><rect x="563.6" y="37" width="52.1" height="15.0" fill="rgb(241,1,8)" rx="2" ry="2" />
<text  x="566.60" y="47.5" >boost..</text>
</g>
<g >
<title>[libQt5Gui.so.5.9.5] (1 samples, 0.05%)</title><rect x="53.9" y="69" width="0.7" height="15.0" fill="rgb(232,164,19)" rx="2" ry="2" />
<text  x="56.94" y="79.5" ></text>
</g>
<g >
<title>QTextEngine::itemize (1 samples, 0.05%)</title><rect x="16.3" y="101" width="0.6" height="15.0" fill="rgb(232,178,50)" rx="2" ry="2" />
<text  x="19.28" y="111.5" ></text>
</g>
<g >
<title>start_thread (631 samples, 33.56%)</title><rect x="793.9" y="101" width="396.1" height="15.0" fill="rgb(235,205,23)" rx="2" ry="2" />
<text  x="796.95" y="111.5" >start_thread</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.05%)</title><rect x="62.1" y="101" width="0.6" height="15.0" fill="rgb(225,49,53)" rx="2" ry="2" />
<text  x="65.10" y="111.5" ></text>
</g>
<g >
<title>QTextBlock::textDirection (3 samples, 0.16%)</title><rect x="35.1" y="85" width="1.9" height="15.0" fill="rgb(216,171,46)" rx="2" ry="2" />
<text  x="38.11" y="95.5" ></text>
</g>
<g >
<title>[libQt5Core.so.5.9.5] (631 samples, 33.56%)</title><rect x="793.9" y="85" width="396.1" height="15.0" fill="rgb(218,61,43)" rx="2" ry="2" />
<text  x="796.95" y="95.5" >[libQt5Core.so.5.9.5]</text>
</g>
<g >
<title>[unknown] (293 samples, 15.59%)</title><rect x="534.1" y="69" width="183.9" height="15.0" fill="rgb(226,135,26)" rx="2" ry="2" />
<text  x="537.10" y="79.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (45 samples, 2.39%)</title><rect x="33.2" y="101" width="28.3" height="15.0" fill="rgb(224,128,46)" rx="2" ry="2" />
<text  x="36.22" y="111.5" >[..</text>
</g>
<g >
<title>QTextFormat::objectIndex (1 samples, 0.05%)</title><rect x="10.0" y="69" width="0.6" height="15.0" fill="rgb(232,75,20)" rx="2" ry="2" />
<text  x="13.00" y="79.5" ></text>
</g>
<g >
<title>__pthread_mutex_lock (2 samples, 0.11%)</title><rect x="57.7" y="85" width="1.3" height="15.0" fill="rgb(241,39,36)" rx="2" ry="2" />
<text  x="60.70" y="95.5" ></text>
</g>
<g >
<title>QTextBlock::text (1 samples, 0.05%)</title><rect x="34.5" y="85" width="0.6" height="15.0" fill="rgb(253,34,24)" rx="2" ry="2" />
<text  x="37.48" y="95.5" ></text>
</g>
<g >
<title>boost::thread_specific_ptr&lt;ros::CallbackQueue::TLS&gt;::delete_data::~delete_data (293 samples, 15.59%)</title><rect x="534.1" y="85" width="183.9" height="15.0" fill="rgb(250,180,18)" rx="2" ry="2" />
<text  x="537.10" y="95.5" >boost::thread_specific_..</text>
</g>
<g >
<title>boost::detail::get_current_thread_data (22 samples, 1.17%)</title><rect x="913.8" y="69" width="13.8" height="15.0" fill="rgb(224,220,7)" rx="2" ry="2" />
<text  x="916.83" y="79.5" ></text>
</g>
<g >
<title>__pthread_mutex_lock (343 samples, 18.24%)</title><rect x="318.8" y="85" width="215.3" height="15.0" fill="rgb(228,119,25)" rx="2" ry="2" />
<text  x="321.81" y="95.5" >__pthread_mutex_lock</text>
</g>
<g >
<title>ros::DurationBase&lt;ros::WallDuration&gt;::isZero@plt (8 samples, 0.43%)</title><rect x="313.8" y="69" width="5.0" height="15.0" fill="rgb(252,133,4)" rx="2" ry="2" />
<text  x="316.79" y="79.5" ></text>
</g>
<g >
<title>QTextLine::layout_helper (2 samples, 0.11%)</title><rect x="22.6" y="101" width="1.2" height="15.0" fill="rgb(234,222,9)" rx="2" ry="2" />
<text  x="25.55" y="111.5" ></text>
</g>
<g >
<title>QTextEngine::font (1 samples, 0.05%)</title><rect x="14.4" y="101" width="0.6" height="15.0" fill="rgb(228,151,30)" rx="2" ry="2" />
<text  x="17.39" y="111.5" ></text>
</g>
<g >
<title>QArrayData::shared_null (3 samples, 0.16%)</title><rect x="10.0" y="101" width="1.9" height="15.0" fill="rgb(215,151,34)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>[libharfbuzz.so.0.10702.0] (3 samples, 0.16%)</title><rect x="31.3" y="101" width="1.9" height="15.0" fill="rgb(217,141,1)" rx="2" ry="2" />
<text  x="34.34" y="111.5" ></text>
</g>
<g >
<title>QUnicodeTables::properties (1 samples, 0.05%)</title><rect x="23.8" y="101" width="0.6" height="15.0" fill="rgb(223,160,39)" rx="2" ry="2" />
<text  x="26.81" y="111.5" ></text>
</g>
<g >
<title>[libQt5Gui.so.5.9.5] (1 samples, 0.05%)</title><rect x="11.3" y="69" width="0.6" height="15.0" fill="rgb(248,27,9)" rx="2" ry="2" />
<text  x="14.26" y="79.5" ></text>
</g>
<g >
<title>[libQt5XcbQpa.so.5.9.5] (2 samples, 0.11%)</title><rect x="43.3" y="85" width="1.2" height="15.0" fill="rgb(238,18,1)" rx="2" ry="2" />
<text  x="46.27" y="95.5" ></text>
</g>
<g >
<title>QTextLine::setLineWidth (1 samples, 0.05%)</title><rect x="53.3" y="69" width="0.6" height="15.0" fill="rgb(251,40,21)" rx="2" ry="2" />
<text  x="56.31" y="79.5" ></text>
</g>
<g >
<title>QChar::decompositionTag (1 samples, 0.05%)</title><rect x="11.9" y="101" width="0.6" height="15.0" fill="rgb(221,61,8)" rx="2" ry="2" />
<text  x="14.88" y="111.5" ></text>
</g>
<g >
<title>[unknown] (404 samples, 21.49%)</title><rect x="65.2" y="85" width="253.6" height="15.0" fill="rgb(218,49,35)" rx="2" ry="2" />
<text  x="68.23" y="95.5" >[unknown]</text>
</g>
<g >
<title>[libQt5Gui.so.5.9.5] (5 samples, 0.27%)</title><rect x="27.6" y="101" width="3.1" height="15.0" fill="rgb(212,162,21)" rx="2" ry="2" />
<text  x="30.57" y="111.5" ></text>
</g>
<g >
<title>ros::spinOnce (32 samples, 1.70%)</title><rect x="1147.3" y="69" width="20.1" height="15.0" fill="rgb(239,124,26)" rx="2" ry="2" />
<text  x="1150.32" y="79.5" ></text>
</g>
<g >
<title>[libpng16.so.16.34.0] (1 samples, 0.05%)</title><rect x="51.4" y="85" width="0.7" height="15.0" fill="rgb(238,143,13)" rx="2" ry="2" />
<text  x="54.43" y="95.5" ></text>
</g>
<g >
<title>QTextEngine::itemize (4 samples, 0.21%)</title><rect x="37.6" y="85" width="2.5" height="15.0" fill="rgb(218,68,1)" rx="2" ry="2" />
<text  x="40.62" y="95.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.05%)</title><rect x="37.0" y="69" width="0.6" height="15.0" fill="rgb(213,55,30)" rx="2" ry="2" />
<text  x="39.99" y="79.5" ></text>
</g>
<g >
<title>QTextDocumentPrivate::~QTextDocumentPrivate (1 samples, 0.05%)</title><rect x="37.0" y="85" width="0.6" height="15.0" fill="rgb(247,112,32)" rx="2" ry="2" />
<text  x="39.99" y="95.5" ></text>
</g>
<g >
<title>ros::spinOnce@plt (11 samples, 0.59%)</title><rect x="1167.4" y="69" width="6.9" height="15.0" fill="rgb(239,143,41)" rx="2" ry="2" />
<text  x="1170.40" y="79.5" ></text>
</g>
<g >
<title>boost::unique_lock&lt;boost::mutex&gt;::lock (65 samples, 3.46%)</title><rect x="718.0" y="85" width="40.8" height="15.0" fill="rgb(254,196,16)" rx="2" ry="2" />
<text  x="721.00" y="95.5" >boo..</text>
</g>
<g >
<title>QTextEngine::shapeText (7 samples, 0.37%)</title><rect x="16.9" y="101" width="4.4" height="15.0" fill="rgb(232,36,5)" rx="2" ry="2" />
<text  x="19.90" y="111.5" ></text>
</g>
<g >
<title>ros::DurationBase&lt;ros::WallDuration&gt;::isZero (23 samples, 1.22%)</title><rect x="299.4" y="69" width="14.4" height="15.0" fill="rgb(249,211,28)" rx="2" ry="2" />
<text  x="302.35" y="79.5" ></text>
</g>
<g >
<title>g_main_context_dispatch (1 samples, 0.05%)</title><rect x="64.6" y="101" width="0.6" height="15.0" fill="rgb(221,227,42)" rx="2" ry="2" />
<text  x="67.61" y="111.5" ></text>
</g>
<g >
<title>__pthread_getspecific (48 samples, 2.55%)</title><rect x="793.9" y="69" width="30.2" height="15.0" fill="rgb(238,20,37)" rx="2" ry="2" />
<text  x="796.95" y="79.5" >__..</text>
</g>
<g >
<title>QTextEngine::formatIndex (2 samples, 0.11%)</title><rect x="15.0" y="101" width="1.3" height="15.0" fill="rgb(232,54,7)" rx="2" ry="2" />
<text  x="18.02" y="111.5" ></text>
</g>
<g >
<title>QTextEngine::shapeTextWithHarfbuzzNG (2 samples, 0.11%)</title><rect x="21.3" y="101" width="1.3" height="15.0" fill="rgb(238,196,47)" rx="2" ry="2" />
<text  x="24.30" y="111.5" ></text>
</g>
<g >
<title>hb_buffer_add_utf16 (2 samples, 0.11%)</title><rect x="59.0" y="85" width="1.2" height="15.0" fill="rgb(231,55,33)" rx="2" ry="2" />
<text  x="61.96" y="95.5" ></text>
</g>
<g >
<title>QWidget::window (1 samples, 0.05%)</title><rect x="26.9" y="101" width="0.7" height="15.0" fill="rgb(249,82,50)" rx="2" ry="2" />
<text  x="29.95" y="111.5" ></text>
</g>
<g >
<title>QChar::direction (1 samples, 0.05%)</title><rect x="33.2" y="85" width="0.7" height="15.0" fill="rgb(229,58,24)" rx="2" ry="2" />
<text  x="36.22" y="95.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock (295 samples, 15.69%)</title><rect x="65.2" y="69" width="185.2" height="15.0" fill="rgb(208,60,37)" rx="2" ry="2" />
<text  x="68.23" y="79.5" >__pthread_mutex_unlock</text>
</g>
<g >
<title>QCss::ValueExtractor::extractBackground (1 samples, 0.05%)</title><rect x="52.1" y="69" width="0.6" height="15.0" fill="rgb(225,17,50)" rx="2" ry="2" />
<text  x="55.05" y="79.5" ></text>
</g>
<g >
<title>QVariant::~QVariant (1 samples, 0.05%)</title><rect x="40.8" y="85" width="0.6" height="15.0" fill="rgb(225,58,17)" rx="2" ry="2" />
<text  x="43.76" y="95.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="61.5" y="101" width="0.6" height="15.0" fill="rgb(218,114,22)" rx="2" ry="2" />
<text  x="64.47" y="111.5" ></text>
</g>
<g >
<title>__libc_recvmsg (1 samples, 0.05%)</title><rect x="55.8" y="85" width="0.6" height="15.0" fill="rgb(225,103,33)" rx="2" ry="2" />
<text  x="58.82" y="95.5" ></text>
</g>
<g >
<title>pthread_getspecific@plt (13 samples, 0.69%)</title><rect x="662.8" y="37" width="8.1" height="15.0" fill="rgb(248,183,47)" rx="2" ry="2" />
<text  x="665.77" y="47.5" ></text>
</g>
<g >
<title>hb_ot_layout_has_glyph_classes (1 samples, 0.05%)</title><rect x="60.8" y="85" width="0.7" height="15.0" fill="rgb(238,199,21)" rx="2" ry="2" />
<text  x="63.84" y="95.5" ></text>
</g>
<g >
<title>ros::CallbackQueue::callAvailable (77 samples, 4.10%)</title><rect x="251.0" y="69" width="48.4" height="15.0" fill="rgb(214,130,36)" rx="2" ry="2" />
<text  x="254.02" y="79.5" >ros:..</text>
</g>
<g >
<title>ros::CallbackQueue::callAvailable (157 samples, 8.35%)</title><rect x="1024.9" y="69" width="98.6" height="15.0" fill="rgb(212,100,42)" rx="2" ry="2" />
<text  x="1027.93" y="79.5" >ros::Callba..</text>
</g>
<g >
<title>all (1,880 samples, 100%)</title><rect x="10.0" y="133" width="1180.0" height="15.0" fill="rgb(205,167,15)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>hb_font_set_user_data (1 samples, 0.05%)</title><rect x="60.2" y="85" width="0.6" height="15.0" fill="rgb(237,174,4)" rx="2" ry="2" />
<text  x="63.21" y="95.5" ></text>
</g>
<g >
<title>boost::detail::get_tss_data (25 samples, 1.33%)</title><rect x="628.9" y="37" width="15.7" height="15.0" fill="rgb(210,35,22)" rx="2" ry="2" />
<text  x="631.87" y="47.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.05%)</title><rect x="55.2" y="85" width="0.6" height="15.0" fill="rgb(224,174,18)" rx="2" ry="2" />
<text  x="58.19" y="95.5" ></text>
</g>
<g >
<title>boost::detail::get_tss_data@plt (1 samples, 0.05%)</title><rect x="945.2" y="69" width="0.6" height="15.0" fill="rgb(247,228,34)" rx="2" ry="2" />
<text  x="948.21" y="79.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@plt (1 samples, 0.05%)</title><rect x="250.4" y="69" width="0.6" height="15.0" fill="rgb(221,163,38)" rx="2" ry="2" />
<text  x="253.39" y="79.5" ></text>
</g>
<g >
<title>QTextBlock::position (1 samples, 0.05%)</title><rect x="37.0" y="37" width="0.6" height="15.0" fill="rgb(229,104,19)" rx="2" ry="2" />
<text  x="39.99" y="47.5" ></text>
</g>
<g >
<title>boost::unique_lock&lt;boost::mutex&gt;::lock (61 samples, 3.24%)</title><rect x="962.2" y="69" width="38.2" height="15.0" fill="rgb(210,158,54)" rx="2" ry="2" />
<text  x="965.16" y="79.5" >boo..</text>
</g>
<g >
<title>ros::CallbackQueue::setupTLS (75 samples, 3.99%)</title><rect x="670.9" y="37" width="47.1" height="15.0" fill="rgb(234,6,29)" rx="2" ry="2" />
<text  x="673.93" y="47.5" >ros:..</text>
</g>
<g >
<title>[libglib-2.0.so.0.5600.4] (1 samples, 0.05%)</title><rect x="30.7" y="101" width="0.6" height="15.0" fill="rgb(246,55,27)" rx="2" ry="2" />
<text  x="33.71" y="111.5" ></text>
</g>
<g >
<title>boost::detail::find_tss_data (143 samples, 7.61%)</title><rect x="824.1" y="69" width="89.7" height="15.0" fill="rgb(205,80,18)" rx="2" ry="2" />
<text  x="827.07" y="79.5" >boost::det..</text>
</g>
<g >
<title>boost::thread_detail::enter_once_region (52 samples, 2.77%)</title><rect x="761.3" y="101" width="32.6" height="15.0" fill="rgb(251,97,23)" rx="2" ry="2" />
<text  x="764.31" y="111.5" >bo..</text>
</g>
<g >
<title>ros_Thread::run (25 samples, 1.33%)</title><rect x="1174.3" y="69" width="15.7" height="15.0" fill="rgb(237,5,0)" rx="2" ry="2" />
<text  x="1177.31" y="79.5" ></text>
</g>
<g >
<title>[libharfbuzz.so.0.10702.0] (11 samples, 0.59%)</title><rect x="44.5" y="85" width="6.9" height="15.0" fill="rgb(239,39,35)" rx="2" ry="2" />
<text  x="47.52" y="95.5" ></text>
</g>
<g >
<title>boost::detail::get_tss_data (28 samples, 1.49%)</title><rect x="927.6" y="69" width="17.6" height="15.0" fill="rgb(239,189,45)" rx="2" ry="2" />
<text  x="930.64" y="79.5" ></text>
</g>
<g >
<title>QTextEngine::findItem (1 samples, 0.05%)</title><rect x="13.8" y="101" width="0.6" height="15.0" fill="rgb(253,52,45)" rx="2" ry="2" />
<text  x="16.77" y="111.5" ></text>
</g>
<g >
<title>__pthread_getspecific (47 samples, 2.50%)</title><rect x="534.1" y="37" width="29.5" height="15.0" fill="rgb(225,103,32)" rx="2" ry="2" />
<text  x="537.10" y="47.5" >__..</text>
</g>
<g >
<title>QMutex::lock (1 samples, 0.05%)</title><rect x="33.9" y="85" width="0.6" height="15.0" fill="rgb(238,60,14)" rx="2" ry="2" />
<text  x="36.85" y="95.5" ></text>
</g>
<g >
<title>garbage_ui (88 samples, 4.68%)</title><rect x="10.0" y="117" width="55.2" height="15.0" fill="rgb(206,205,35)" rx="2" ry="2" />
<text  x="13.00" y="127.5" >garba..</text>
</g>
<g >
<title>QTextBlockFormat::tabPositions (1 samples, 0.05%)</title><rect x="52.7" y="69" width="0.6" height="15.0" fill="rgb(228,48,42)" rx="2" ry="2" />
<text  x="55.68" y="79.5" ></text>
</g>
<g >
<title>ros::CallbackQueue::setupTLS (38 samples, 2.02%)</title><rect x="1123.5" y="69" width="23.8" height="15.0" fill="rgb(229,216,47)" rx="2" ry="2" />
<text  x="1126.47" y="79.5" >r..</text>
</g>
<g >
<title>pthread_getspecific@plt (13 samples, 0.69%)</title><rect x="1016.8" y="69" width="8.1" height="15.0" fill="rgb(220,79,29)" rx="2" ry="2" />
<text  x="1019.77" y="79.5" ></text>
</g>
<g >
<title>ros_Thread (1,792 samples, 95.32%)</title><rect x="65.2" y="117" width="1124.8" height="15.0" fill="rgb(205,172,12)" rx="2" ry="2" />
<text  x="68.23" y="127.5" >ros_Thread</text>
</g>
<g >
<title>boost::thread_detail::enter_once_region (26 samples, 1.38%)</title><rect x="945.8" y="69" width="16.4" height="15.0" fill="rgb(207,172,32)" rx="2" ry="2" />
<text  x="948.84" y="79.5" ></text>
</g>
<g >
<title>QUnicodeTools::initCharAttributes (4 samples, 0.21%)</title><rect x="24.4" y="101" width="2.5" height="15.0" fill="rgb(238,41,29)" rx="2" ry="2" />
<text  x="27.44" y="111.5" ></text>
</g>
<g >
<title>boost::thread_detail::enter_once_region (29 samples, 1.54%)</title><rect x="644.6" y="37" width="18.2" height="15.0" fill="rgb(238,73,41)" rx="2" ry="2" />
<text  x="647.56" y="47.5" ></text>
</g>
<g >
<title>__poll (2 samples, 0.11%)</title><rect x="62.7" y="101" width="1.3" height="15.0" fill="rgb(224,8,24)" rx="2" ry="2" />
<text  x="65.72" y="111.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.16%)</title><rect x="10.0" y="85" width="1.9" height="15.0" fill="rgb(254,135,9)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>boost::unique_lock&lt;boost::mutex&gt;::lock@plt (26 samples, 1.38%)</title><rect x="1000.4" y="69" width="16.4" height="15.0" fill="rgb(253,80,44)" rx="2" ry="2" />
<text  x="1003.45" y="79.5" ></text>
</g>
<g >
<title>non-virtual thunk to QWidget::metric (1 samples, 0.05%)</title><rect x="54.6" y="69" width="0.6" height="15.0" fill="rgb(235,125,24)" rx="2" ry="2" />
<text  x="57.56" y="79.5" ></text>
</g>
<g >
<title>boost::detail::get_current_thread_data (21 samples, 1.12%)</title><rect x="615.7" y="37" width="13.2" height="15.0" fill="rgb(214,129,46)" rx="2" ry="2" />
<text  x="618.69" y="47.5" ></text>
</g>
<g >
<title>QTextFrame::iterator::operator++ (1 samples, 0.05%)</title><rect x="10.6" y="69" width="0.7" height="15.0" fill="rgb(219,63,4)" rx="2" ry="2" />
<text  x="13.63" y="79.5" ></text>
</g>
<g >
<title>[unknown] (1,109 samples, 58.99%)</title><rect x="65.2" y="101" width="696.1" height="15.0" fill="rgb(246,170,41)" rx="2" ry="2" />
<text  x="68.23" y="111.5" >[unknown]</text>
</g>
<g >
<title>QTextFormat::QTextFormat (1 samples, 0.05%)</title><rect x="40.1" y="85" width="0.7" height="15.0" fill="rgb(215,66,7)" rx="2" ry="2" />
<text  x="43.13" y="95.5" ></text>
</g>
<g >
<title>[libQt5Widgets.so.5.9.5] (1 samples, 0.05%)</title><rect x="42.6" y="85" width="0.7" height="15.0" fill="rgb(228,215,0)" rx="2" ry="2" />
<text  x="45.64" y="95.5" ></text>
</g>
<g >
<title>[unknown] (293 samples, 15.59%)</title><rect x="534.1" y="53" width="183.9" height="15.0" fill="rgb(246,37,54)" rx="2" ry="2" />
<text  x="537.10" y="63.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (5 samples, 0.27%)</title><rect x="52.1" y="85" width="3.1" height="15.0" fill="rgb(210,137,29)" rx="2" ry="2" />
<text  x="55.05" y="95.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.11%)</title><rect x="56.4" y="85" width="1.3" height="15.0" fill="rgb(223,104,21)" rx="2" ry="2" />
<text  x="59.45" y="95.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@plt (4 samples, 0.21%)</title><rect x="758.8" y="85" width="2.5" height="15.0" fill="rgb(250,204,22)" rx="2" ry="2" />
<text  x="761.80" y="95.5" ></text>
</g>
</g>
</svg>
